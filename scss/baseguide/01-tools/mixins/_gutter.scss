////
/// @group grid
////


/// Get a gutter value from the map $grid-gutter
///
/// @param {String} $breakpoint [null] - Breakpoint name
/// @param {Number|Map} $gutter [$grid-gutter] - The amount of gutter as a number or a map formatted as `(xs: 30px, md: 60px)`
/// @return {Number} - Gutter value as a number
@function get-gutter($breakpoint: null, $gutter: $grid-gutter) {
  @if (type-of($gutter) == 'map') {
    @if $breakpoint {
      @if map-has-key($gutter, $breakpoint) {
        $gutter: map-get($gutter, $breakpoint);
      }
      @else {
        @error "Breakpoint `#{$breakpoint}` wasn't found in $gutter.";
      }
    }
    @else {
      $gutter: nth(map-values($gutter), 1);
    }
  }

  @return to-rem($gutter);
}


/// Output margin or padding gutter depending on the type
///
/// @param {Number|Map} $gutter [$grid-gutter] - The amount of gutter as a number or sizing map formatted as `(min: 30px, max: 60px)`
/// @param {String} $prop ['gap'] - Property to use for the gutter ('gap', 'margin' or 'padding')
@mixin gutter($gutter: $grid-gutter, $prop: 'gap') {
  $negative: false;

  @if ($prop == 'margin') {
    $negative: true;
  }

  @if ($prop != 'gap') {
    $gutter: get-half-sizing($gutter);

    @include fluid-calc(#{$prop}-left, $gutter, $negative: $negative);
    @include fluid-calc(#{$prop}-right, $gutter, $negative: $negative);
  }
  @else {
    @include fluid-calc($prop, $gutter, $negative: $negative);
  }
}


/// Wrapper for gutter mixin for switching between a gutter number or map
///
/// @param {Number|Map} $gutter [$grid-gutter] - The amount of gutter as number, breakpoint map `(xs: 30px, md: 60px)` or sizing map (min: 30px, max: 60px)
/// @param {String} $prop ['gap'] - Property to use for the gutter ('gap', 'margin' or 'padding')
@mixin make-gutters($gutter: $grid-gutter, $prop: 'gap') {
  @if is-sizing-map($gutter) {
    @include gutter($gutter, $prop);
  }
  @else if (type-of($gutter) == 'map') {
    @each $breakpoint, $width in $gutter {
      @include skip-first-breakpoint($breakpoint) {
        @include gutter($width, $prop);
      }
    }
  }
  @else {
    @include gutter($gutter, $prop);
  }
}
