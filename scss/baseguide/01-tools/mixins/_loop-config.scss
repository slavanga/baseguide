////
/// @group global
////


/// Helper mixin for `fluid-calc` and `get-config`
///
/// @param {Map|Number|List|String} $sizes - Map of two sizes formatted as (min: x, max y), list of two sizes formatted as (x, y) or just a number (min size)
/// @param {String} $prop [null] - Any CSS property that supports calc as a value
/// @param {Bool} $negative [false] - Negates the values if true
/// @param {Bool} $important [false] - Adds important flag if true
@mixin loop-config($sizes, $prop: null, $negative: false, $important: false) {
  @each $key, $value in $sizes {
    @if (map-has-key($mq-breakpoints, $key)) {
      $breakpoint-keys: map-keys($sizes);
      $next-breakpoint: breakpoint-next($key, $breakpoint-keys) or map-get($fluid-breakpoints, 'max');
      $breakpoint-range: (
        min: $key,
        max: $next-breakpoint
      );

      @include skip-first-breakpoint($key) {
        @if (is-sizing-map($value)) {
          @include fluid-calc($prop, $value, $breakpoint-range, $negative, $important, $current-breakpoint: $key, $all-breakpoints: $breakpoint-keys);
        }
        @else {
          @each $deep-key, $deep-value in $value {
            @if (is-sizing-map($deep-value)) {
              @include fluid-calc($deep-key, $deep-value, $breakpoint-range, $negative, $important, $current-breakpoint: $key, $all-breakpoints: $breakpoint-keys);
            }
            @else {
              @include output-props($deep-key, $deep-value);
            }
          }
        }
      }
    }
    @else {
      @include output-props($key, $value);
    }
  }
}
