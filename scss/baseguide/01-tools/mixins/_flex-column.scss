////
/// @group grid
////


/// Output flex column base styles with gutter
///
/// @param {Number|Map} $gutter [$grid-container-gutter] - The amount of space between columns as a number or a map formatted as `(xs: 30px, md: 60px)`
/// @param {Number} $size [100%] - Width of the column as number
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin column-base($gutter: $grid-gutter, $size: 100%, $columns: $grid-columns) {
  @include make-gutters($gutter, 'padding');
  @include column($size, $columns);

  position: relative;
}


/// Output flex column width modifier styles
///
/// @param {Number|String} $size ['expand'] - Column size as number or string ('expand' or 'shrink')
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin column($size: 'expand', $columns: $grid-columns) {
  @if $size {
    @if (type-of($size) == 'number') {
      @if (unit($size) == '%') {
        width: $size;
      }
      @else {
        @if $size < 1 {
          width: percentage($size);
        }
        @else {
          width: percentage(divide($size, $columns));
        }
      }
    }
    @else {
      width: auto;
      max-width: 100%;

      @if $size == 'shrink' {
        flex: 0 0 auto;
      }

      @if $size == 'expand' {
        flex: 1 1 auto;
      }
    }
  }
}


/// Output flex column push styles
///
/// @param {Number} $size - Column size as number of columns
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin column-push($size, $columns: $grid-columns) {
  @if $size > 0 {
    left: percentage(divide($size, $columns));
  }
  @else {
    left: auto;
  }
}


/// Output flex column pull styles
///
/// @param {Number} $size - Column size as number of columns
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin column-pull($size, $columns: $grid-columns) {
  @if $size > 0 {
    right: percentage(divide($size, $columns));
  }
  @else {
    right: auto;
  }
}


/// Output flex column offset styles
///
/// @param {Number} $size - Column size as number of columns
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin column-offset($size, $columns: $grid-columns) {
  @if $size < $columns {
    margin-left: percentage(divide($size, $columns));
  }
}

// Generate columns for a specific breakpoint
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Boolean} $pull [$grid-pull-class] - Outputs column pull class if true
/// @param {Boolean} $push [$grid-push-class] - Outputs column push class if true
/// @param {Boolean} $offset [$grid-offset-class] - Outputs column offset class if true
@mixin loop-columns($breakpoint, $pull: $grid-pull-classes, $push: $grid-push-classes, $offset: $grid-offset-classes) {
  @for $i from 0 through $grid-columns {
    @if $i > 0 {
      .#{$meta-prefix-objects}col#{$meta-class-modifier}#{$breakpoint}-#{$i} {
        @include column($i, $grid-columns);
      }
    }

    @if $pull {
      .#{$meta-prefix-objects}col#{$meta-class-modifier}#{$breakpoint}-pull-#{$i} {
        @include column-pull($i, $grid-columns);
      }
    }

    @if $push {
      .#{$meta-prefix-objects}col#{$meta-class-modifier}#{$breakpoint}-push-#{$i} {
        @include column-push($i, $grid-columns);
      }
    }

    @if $offset {
      .#{$meta-prefix-objects}col#{$meta-class-modifier}#{$breakpoint}-offset-#{$i} {
        @include column-offset($i, $grid-columns);
      }
    }
  }
}
