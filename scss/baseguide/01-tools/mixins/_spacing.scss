////
/// @group token
////

/// Wrapper mixin for fluid-calc that gets spacings from the map `$token-spacings`
///
/// @param {String} $prop - Any CSS property that supports calc as a value
/// @param {Map|Number|List|String} $sizes [$token-spacings-default:] - Map key of `$token-spacings`, map of two sizes formatted as `(min: x, max y)`, list of two sizes formatted as `(x, y)` or just a number (min size)
/// @param {Map} $breakpoints - Map of two named breakpoints from `$mq-breakpoints` formatted as `(md, lg)` or custom px values formatted as `(min: 600px, max: 900px)`
/// @param {Bool} $negative [false] - Negates the values if true
/// @param {Bool} $important [false] - Adds important flag if true
@mixin spacing($prop, $sizes: $token-spacings-default, $negative: false, $important: false) {
  $spacing-sizes: map-get($token-spacings, $sizes);

  @if $spacing-sizes {
    $sizes: $spacing-sizes;
  } @else {
    @if (type-of($sizes) == 'string') {
      @error "The spacing `#{$sizes}` wasn't found in map $token-spacings.";
    }
  }

  // If we have a map of named breakpoints
  @if ((type-of($sizes) == 'map') and map-has-key($mq-breakpoints, nth(map-keys($sizes), 1))) {
    @include loop-variation($sizes, $prop, $negative: $negative, $important: $important);
  } @else {
    @include fluid-calc($prop, $sizes, $negative: $negative, $important: $important);
  }
}
