////
/// @group global
////


@use 'sass:math';

/// Scale value according to the passed exponent and type scale
///
/// @param {Number} $exp - Exponent
/// @param {Number} $size [$font-size-base] - Size to scale
/// @param {Number} $type-scale [$type-scale] - Type scale (e.g 1.2)
/// @return {Number} - Scaled value
@function modular-scale($exp, $size: $font-size-base, $type-scale: $type-scale) {
  @return math.pow($type-scale, $exp) * $size;
}


/// Remove unit from a value
///
/// @param {Number} $value - value to be stripped
/// @return {Number} - Raw number without unit
@function strip-unit($value) {
  @return math.div($value, $value * 0 + 1);
}


/// Convert a value to rem
///
/// @param {Number} $value - Value to be converted
/// @param {Number} $base [16px] - Base font size
/// @example scss
/// body {
///   font-size: to-rem(20px);
/// }
/// @return {Number} - Rem value
@function to-rem($value, $base: 16px) {
  @if (unit($value) == 'em') {
    $value: strip-unit($value) * 1rem;
  }

  @if (unit($value) != 'rem') {
    $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
  }

  @if (strip-unit($value) == 0) {
    $value: 0;
  }

  @return $value;
}


/// Convert a value to em
///
/// @param {Number} $value - Value to be converted
/// @param {Number} $base [16px] - Base font size
/// @example scss
/// .heading {
///   margin-bottom: to-em(20px);
/// }
/// @return {Number} - Em value
@function to-em($value, $base: 16px) {
  @if unit($value) == 'px' or unitless($value) {
    $value: to-rem($value, $base);
  }

  @return strip-unit($value) * 1em;
}


/// Convert an aspect ratio to a percentage value
///
/// @param {String} $ratio - Aspect ratio formatted as `x by y`
/// @return {Number} - Percentage value
@function ratio-to-percentage($ratio) {
  $width: nth($ratio, 1);
  $height: nth($ratio, 3);

  @return percentage(math.div($height, $width));
}


/// Replace `$search` with `$replace` in `$string`
///
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace [''] - New value
/// @return {String} - Replaced string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


/// Validate a sizing map
///
/// @param {Map} $map - Map to test
/// @return {Boolean} - True if the parameter is a map with a `min` key
@function is-sizing-map($map) {
  @return (type-of($map) == 'map' and map-has-key($map, 'min'));
}


/// Get the next breakpoint from a map
///
/// @param {String} $name - Current breakpoint name
/// @param {Map} $breakpoints [map-keys($mq-breakpoints)] - Map of breakpoints
/// @return {String} - Next breakpoint name
@function breakpoint-next($name, $breakpoints: map-keys($mq-breakpoints)) {
  $breakpoint-index: index($breakpoints, $name);
  $next: false;

  @if not $breakpoint-index {
    @error "Breakpoint `#{$name}` not found in $breakpoints";
  }

  @if (length($breakpoints) > 1 and $breakpoint-index < length($breakpoints)) {
    $next: nth($breakpoints, $breakpoint-index + 1);
  }

  @return $next;
}


/// Get an icon from the `$icons` map in the specified color
///
/// @param {String} $icon - Map key of `$icons`
/// @param {String} $color [$icon-color] - Hex color value
/// @example scss
/// .icon {
///   background-image: url(get-icon('radio', #fff));
/// }
/// @return {String} Encoded SVG icon string
@function get-icon($icon, $color: $icon-color) {
  $color: inspect($color);

  @if (str-index($color, '#') != null) {
    @if map-has-key($icons, $icon) {
      $icon: 'data:image/svg+xml;charset=utf8,' + map-get($icons, $icon);
      $icon: str-replace($icon, inspect($icon-color), $color);

      @each $char, $encoded in (('<', '%3C'), ('>', '%3E'), ('#', '%23'), ('"', "'")) {
        $icon: str-replace($icon, $char, $encoded);
      }
    }
    @else {
      @error "Please make sure `#{$icon}` is defined in the $icons map.";
    }
  }
  @else {
    @error "Please make sure `#{$color}` is a HEX value.";
  }

  @return $icon;
}


/// Get a z-index value the `$z-index` map
///
/// @param {String} $name - Map key of `$z-index`
/// @example scss
/// .layer {
///   z-index: z-index(below);
/// }
/// @return {Number} z-index value
@function z-index($name) {
  @if map-has-key($z-index, $name) {
    @return map-get($z-index, $name);
  }
  @else {
    @error "The key `#{$z-index}` wasn't found in $z-index.";
  }
}
