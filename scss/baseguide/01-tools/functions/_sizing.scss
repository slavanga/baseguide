////
/// @group sizing
////

/// Validate a sizing map
///
/// @param {Map} $map - Map to test
/// @return {Boolean} - True if the parameter is a map with a `min` key
@function is-sizing-map($map) {
  @return (type-of($map) == 'map' and map-has-key($map, 'min') and length($map) < 3);
}

/// Get largest sizing of sizing map
///
/// @param {Map|Number} $sizing - Sizing map or number
/// @return {Number} - Largest sizing in the map
@function get-largest-sizing($sizing) {
  @if (type-of($sizing) == 'map') {
    $sizing: nth(map-values($sizing), length($sizing));

    @if is-sizing-map($sizing) {
      $sizing: map-get($sizing, 'max');

      @if not $sizing {
        $sizing: map-get($sizing, 'min');
      }
    }
  }

  @return $sizing;
}

/// Half values of a sizing map
///
/// @param {Map|Number} $sizing - Sizing map, breakpoint map or number
/// @return {Map|Number} - Map with halved values or halved number
@function get-half-sizing($sizing) {
  @if (type-of($sizing) == 'map') {
    @each $key, $value in $sizing {
      @if (type-of($value) == 'map') {
        $nested-map: ();

        @each $deep-key, $deep-value in $value {
          // Divide nested map values and add to new map
          $nested-map: map-merge(
            $nested-map,
            (
              $deep-key: divide($deep-value, 2),
            )
          );
        }

        // Merge new map into map key of the original map
        $sizing: map-merge(
          $sizing,
          (
            $key: $nested-map,
          )
        );
      } @else {
        // Replace map values with divided values
        $sizing: map-merge(
          $sizing,
          (
            $key: divide($value, 2),
          )
        );
      }
    }
  } @else {
    $sizing: divide($sizing, 2);
  }

  @return $sizing;
}
